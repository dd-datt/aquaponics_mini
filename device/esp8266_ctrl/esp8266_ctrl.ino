
// ========================
// Khai b√°o th∆∞ vi·ªán s·ª≠ d·ª•ng
// ========================
#include <ESP8266WiFi.h>         // K·∫øt n·ªëi WiFi
#include <PubSubClient.h>        // K·∫øt n·ªëi MQTT
#include <DHT.h>                 // ƒê·ªçc c·∫£m bi·∫øn nhi·ªát ƒë·ªô/ƒë·ªô ·∫©m DHT22
#include <Servo.h>               // ƒêi·ªÅu khi·ªÉn servo
#include <ArduinoJson.h>         // Ph√¢n t√≠ch c√∫ ph√°p JSON


// ========================
// Khai b√°o ch√¢n k·∫øt n·ªëi ph·∫ßn c·ª©ng
// ========================
#define DHT_PIN 2            // D4 (GPIO2) - DHT22 data
#define PUMP_PIN 14          // D5 (GPIO14) - Relay IN1 cho b∆°m l·ªçc (active LOW)
#define RELAY_LIGHT_PIN 12   // D6 (GPIO12) - Relay IN2 cho ƒë√®n (active LOW)
#define AIR_PIN 5            // D1 (GPIO5)  - Relay IN3 cho m√°y s·ª•c kh√≠ (active LOW)
#define PUMP_REFILL_PIN 16   // D0 (GPIO16) - Relay IN4 cho b∆°m n∆∞·ªõc b·ªï sung (active LOW)
#define SERVO_PIN 4          // D2 (GPIO4)  - Servo SG90 cho cho ƒÉn
#define FLOAT_SWITCH_PIN 13  // D7 (GPIO13) - C√¥ng t·∫Øc phao (INPUT_PULLUP)


// ========================
// C·∫•u h√¨nh MQTT
// ========================
#define MQTT_BROKER "broker.hivemq.com"      // ƒê·ªãa ch·ªâ broker MQTT
#define MQTT_PORT 1883                       // C·ªïng MQTT
#define MQTT_CLIENT_ID "esp8266_aquaponics" // T√™n client MQTT
#define MQTT_CMD_TOPIC "aquaponics/cmd"     // Ch·ªß ƒë·ªÅ nh·∫≠n l·ªánh
#define MQTT_STATUS_TOPIC "aquaponics/status" // Ch·ªß ƒë·ªÅ g·ª≠i tr·∫°ng th√°i


// ========================
// C·∫•u h√¨nh WiFi (c√≥ th·ªÉ thay ƒë·ªïi qua MQTT)
// ========================
String wifiSsid = "B-LINK_5F35";      // T√™n WiFi
String wifiPassword = "0123456789";   // M·∫≠t kh·∫©u WiFi


// ========================
// C√°c th√¥ng s·ªë th·ªùi gian
// ========================
#define PUBLISH_INTERVAL 500     // Th·ªùi gian g·ª≠i tr·∫°ng th√°i (ms)
#define RECONNECT_INTERVAL 5000  // Th·ªùi gian th·ª≠ l·∫°i k·∫øt n·ªëi MQTT (ms)
#define FEED_HOLD_TIME 700       // Th·ªùi gian gi·ªØ servo khi cho ƒÉn (ms)
#define FEED_DEFAULT_ANGLE 180   // G√≥c m·∫∑c ƒë·ªãnh c·ªßa servo khi cho ƒÉn


// ========================
// Bi·∫øn tr·∫°ng th√°i v√† ƒë·ªëi t∆∞·ª£ng c·∫£m bi·∫øn
// ========================
DHT dht(DHT_PIN, DHT22);                // ƒê·ªëi t∆∞·ª£ng c·∫£m bi·∫øn DHT22
WiFiClient espClient;                   // ƒê·ªëi t∆∞·ª£ng WiFi
PubSubClient client(espClient);         // ƒê·ªëi t∆∞·ª£ng MQTT

// Bi·∫øn l∆∞u tr·∫°ng th√°i h·ªá th·ªëng
float temperature = 0.0;                // Nhi·ªát ƒë·ªô
float humidity = 0.0;                   // ƒê·ªô ·∫©m
bool waterLevel = false;                // M·ª±c n∆∞·ªõc (true=ƒë·∫ßy, false=thi·∫øu)
bool pumpState = false;                 // Tr·∫°ng th√°i b∆°m l·ªçc
bool lightState = false;                // Tr·∫°ng th√°i ƒë√®n
bool airState = false;                  // Tr·∫°ng th√°i m√°y s·ª•c kh√≠
bool pumpRefillState = false;           // Tr·∫°ng th√°i b∆°m b·ªï sung n∆∞·ªõc
Servo feedServo;                        // ƒê·ªëi t∆∞·ª£ng servo cho ƒÉn
unsigned long lastFeedTime = 0;         // Th·ªùi gian l·∫ßn cu·ªëi cho ƒÉn
bool feeding = false;                   // ƒêang cho ƒÉn hay kh√¥ng
unsigned long feedStartTime = 0;        // Th·ªùi gian b·∫Øt ƒë·∫ßu cho ƒÉn
int feedTargetAngle = 0;                // G√≥c servo khi cho ƒÉn
enum FeedState { IDLE, MOVING_TO_ANGLE, HOLDING, RETURNING } feedState = IDLE; // Tr·∫°ng th√°i cho ƒÉn

// Bi·∫øn th·ªùi gian cho c√°c ch·ª©c nƒÉng
unsigned long lastPublishTime = 0;      // Th·ªùi gian g·ª≠i tr·∫°ng th√°i l·∫ßn cu·ªëi
unsigned long lastReconnectTime = 0;    // Th·ªùi gian th·ª≠ l·∫°i k·∫øt n·ªëi l·∫ßn cu·ªëi

// ========================
// H√†m ƒëi·ªÅu khi·ªÉn c√°c thi·∫øt b·ªã (b∆°m, ƒë√®n, kh√≠, b∆°m b·ªï sung, servo)
// ========================
// H√†m b·∫≠t/t·∫Øt b∆°m l·ªçc
void setPump(bool on) {
  pumpState = on;
  digitalWrite(PUMP_PIN, on ? LOW : HIGH); // Relay active LOW
  Serial.print("Pump "); Serial.println(on ? "ON" : "OFF");
}

// H√†m b·∫≠t/t·∫Øt ƒë√®n
void setLight(bool on) {
  lightState = on;
  digitalWrite(RELAY_LIGHT_PIN, on ? LOW : HIGH); // Relay active LOW
  Serial.print("Light "); Serial.println(on ? "ON" : "OFF");
}

// H√†m b·∫≠t/t·∫Øt m√°y s·ª•c kh√≠
void setAir(bool on) {
  airState = on;
  digitalWrite(AIR_PIN, on ? LOW : HIGH); // Relay active LOW
  Serial.print("Air "); Serial.println(on ? "ON" : "OFF");
}

// H√†m b·∫≠t/t·∫Øt b∆°m b·ªï sung n∆∞·ªõc
void setPumpRefill(bool on) {
  pumpRefillState = on;
  digitalWrite(PUMP_REFILL_PIN, on ? LOW : HIGH); // Relay active LOW
  Serial.print("PumpRefill "); Serial.println(on ? "ON" : "OFF");
}

// H√†m b·∫Øt ƒë·∫ßu cho ƒÉn b·∫±ng servo
void startFeed(int angle, int holdMs) {
  if (feeding) return;
  feeding = true;
  feedState = MOVING_TO_ANGLE;
  feedTargetAngle = angle;
  feedServo.attach(SERVO_PIN);
  feedServo.write(angle);
  feedStartTime = millis();
  Serial.print("Feed started: angle="); Serial.print(angle);
  Serial.print(", holdMs="); Serial.println(holdMs);
}

// X·ª≠ l√Ω cho ƒÉn kh√¥ng ch·∫∑n (non-blocking)
void handleFeed() {
  if (!feeding) return;

  unsigned long currentTime = millis();
  switch (feedState) {
    case MOVING_TO_ANGLE:
      if (currentTime - feedStartTime >= 400) { // Th·ªùi gian di chuy·ªÉn ƒë·∫øn g√≥c cho ƒÉn
        feedState = HOLDING;
        feedStartTime = currentTime;
      }
      break;
    case HOLDING:
      if (currentTime - feedStartTime >= FEED_HOLD_TIME) {
        feedServo.write(0);
        feedState = RETURNING;
        feedStartTime = currentTime;
      }
      break;
    case RETURNING:
      if (currentTime - feedStartTime >= 400) { // Th·ªùi gian tr·∫£ v·ªÅ g√≥c 0
        feedServo.detach();
        feeding = false;
        feedState = IDLE;
        Serial.println("Feed completed");
      }
      break;
    default:
      break;
  }
}

// ========================
// C√°c h√†m k·∫øt n·ªëi WiFi & MQTT
// ========================
// H√†m k·∫øt n·ªëi WiFi
void setupWiFi() {
  Serial.println("==============================");
  Serial.print("Connecting to WiFi: "); Serial.println(wifiSsid);
  WiFi.begin(wifiSsid.c_str(), wifiPassword.c_str());

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: "); Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nWiFi connection failed (check credentials)");
  }
}

// H√†m ƒë·ªïi th√¥ng tin WiFi
void changeWiFi(const char* ssid, const char* pass) {
  Serial.println("Changing WiFi credentials...");
  wifiSsid = String(ssid);
  wifiPassword = String(pass);
  WiFi.disconnect();
  delay(500);
  setupWiFi();
}

// H√†m k·∫øt n·ªëi l·∫°i MQTT
void reconnectMQTT() {
  Serial.println("Attempting MQTT connection...");
  String clientId = String(MQTT_CLIENT_ID) + String(random(0xffff), HEX);
  if (client.connect(clientId.c_str())) {
    Serial.println("MQTT connected");
    client.subscribe(MQTT_CMD_TOPIC);
    Serial.println("‚úÖ Subscribed to: " + String(MQTT_CMD_TOPIC));
  } else {
    Serial.print("MQTT connection failed, rc="); Serial.println(client.state());
  }
}

// ========================
// H√†m x·ª≠ l√Ω l·ªánh nh·∫≠n qua MQTT (callback)
// ========================
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  // Nh·∫≠n v√† x·ª≠ l√Ω l·ªánh t·ª´ MQTT
  String msg; msg.reserve(length + 1);
  for (unsigned int i = 0; i < length; i++) msg += (char)payload[i];
  msg.trim();

  Serial.print("MQTT msg ["); Serial.print(topic); Serial.print("]: "); Serial.println(msg);

  // Ch·ªâ x·ª≠ l√Ω c√°c message d·∫°ng JSON
  if (!msg.startsWith("{") || !msg.endsWith("}")) {
    Serial.println("‚ùå Ignoring non-JSON message");
    return;
  }

  // Ph√¢n t√≠ch c√∫ ph√°p JSON
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, msg);
  if (error) {
    Serial.print("‚ùå JSON parse error: "); Serial.println(error.c_str());
    return;
  }

  // X·ª≠ l√Ω t·ª´ng ch·ª©c nƒÉng ƒë·ªôc l·∫≠p
  if (doc.containsKey("pump")) {
    bool value = doc["pump"];
    setPump(value);
    Serial.println(value ? "üü¢ PUMP ONLY: ON" : "üî¥ PUMP ONLY: OFF");
  }

  if (doc.containsKey("light")) {
    bool value = doc["light"];
    setLight(value);
    Serial.println(value ? "üü° LIGHT ONLY: ON" : "‚ö´ LIGHT ONLY: OFF");
  }

  if (doc.containsKey("air")) {
    bool value = doc["air"];
    setAir(value);
    Serial.println(value ? "üîµ AIR ONLY: ON" : "‚ö™ AIR ONLY: OFF");
  }

  if (doc.containsKey("feed")) {
    int angle = doc["feed"].containsKey("angle") ? doc["feed"]["angle"] : FEED_DEFAULT_ANGLE;
    int holdMs = doc["feed"].containsKey("hold_ms") ? doc["feed"]["hold_ms"] : FEED_HOLD_TIME;
    startFeed(angle, holdMs);
    Serial.println("üçΩÔ∏è FEED ONLY: Executed");
  }

  // Nh·∫≠n l·ªánh ƒë·ªïi WiFi
  if (doc.containsKey("wifi")) {
    const char* ssid = doc["wifi"]["ssid"] | "";
    const char* pass = doc["wifi"]["pass"] | "";
    if (strlen(ssid) > 0) {
      changeWiFi(ssid, pass);
      Serial.println("‚úÖ WiFi credentials updated via MQTT");
    } else {
      Serial.println("‚ùå WiFi SSID missing in command");
    }
  }

  Serial.println("‚úÖ Command processed - Each device independent");
}

// ========================
// ƒê·ªçc c·∫£m bi·∫øn v√† g·ª≠i tr·∫°ng th√°i l√™n MQTT
// ========================
// ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn
void readSensors() {
  float t = dht.readTemperature();
  float h = dht.readHumidity();
  if (!isnan(t) && !isnan(h)) {
    temperature = t;
    humidity = h;
  }
  waterLevel = (digitalRead(FLOAT_SWITCH_PIN) == HIGH);
}

// G·ª≠i tr·∫°ng th√°i h·ªá th·ªëng l√™n MQTT
void publishStatus() {
  if (!client.connected()) return;

  StaticJsonDocument<200> doc;
  doc["temp"] = temperature;
  doc["humidity"] = humidity;
  doc["water"] = waterLevel;
  doc["pump"] = pumpState;
  doc["light"] = lightState;
  doc["air"] = airState;
  doc["pump_refill"] = pumpRefillState;

  String statusMessage;
  serializeJson(doc, statusMessage);
  
  if (!client.publish(MQTT_STATUS_TOPIC, statusMessage.c_str())) {
    Serial.println("Failed to publish status");
  } else {
    Serial.println("Status published: " + statusMessage);
  }
}

// ========================
// H√†m kh·ªüi t·∫°o (setup) v√† v√≤ng l·∫∑p ch√≠nh (loop)
// ========================
void setup() {
  // Kh·ªüi t·∫°o c√°c ch√¢n v√† ƒë·ªëi t∆∞·ª£ng
  Serial.begin(115200);
  delay(100);

  pinMode(PUMP_PIN, OUTPUT);
  pinMode(RELAY_LIGHT_PIN, OUTPUT);
  pinMode(AIR_PIN, OUTPUT);
  pinMode(PUMP_REFILL_PIN, OUTPUT);
  pinMode(FLOAT_SWITCH_PIN, INPUT_PULLUP);

  // ƒê·∫£m b·∫£o c√°c thi·∫øt b·ªã t·∫Øt khi kh·ªüi ƒë·ªông
  digitalWrite(PUMP_PIN, HIGH);
  digitalWrite(RELAY_LIGHT_PIN, HIGH);
  digitalWrite(AIR_PIN, HIGH);
  digitalWrite(PUMP_REFILL_PIN, HIGH);

  dht.begin();
  setupWiFi();
  client.setServer(MQTT_BROKER, MQTT_PORT);
  client.setCallback(mqttCallback);
}

void loop() {
  // Duy tr√¨ k·∫øt n·ªëi WiFi
  if (WiFi.status() != WL_CONNECTED && millis() - lastReconnectTime > RECONNECT_INTERVAL) {
    lastReconnectTime = millis();
    setupWiFi();
  }

  // Duy tr√¨ k·∫øt n·ªëi MQTT
  if (WiFi.status() == WL_CONNECTED && !client.connected() && millis() - lastReconnectTime > RECONNECT_INTERVAL) {
    lastReconnectTime = millis();
    reconnectMQTT();
  } else {
    client.loop();
  }

  readSensors(); // ƒê·ªçc c·∫£m bi·∫øn
  
  // ƒêi·ªÅu khi·ªÉn b∆°m b·ªï sung n∆∞·ªõc t·ª± ƒë·ªông theo m·ª±c n∆∞·ªõc
  if (!waterLevel && !pumpRefillState) {
    setPumpRefill(true);
  } else if (waterLevel && pumpRefillState) {
    setPumpRefill(false);
  }

  handleFeed(); // X·ª≠ l√Ω servo cho ƒÉn

  // G·ª≠i tr·∫°ng th√°i l√™n MQTT
  if (WiFi.status() == WL_CONNECTED && client.connected() && millis() - lastPublishTime > PUBLISH_INTERVAL) {
    publishStatus();
    lastPublishTime = millis();
  }

  delay(50); // Gi·∫£m delay ƒë·ªÉ tƒÉng ƒë·ªô ph·∫£n h·ªìi
}